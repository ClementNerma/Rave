/**
 * @file Native functions
 * @author Cl√©ment Nerma
 * @license Apache-2.0
 */

// ==================== Debug functions ==================== //

/**
 * Print values
 * @param values The values to print
 * @param pretty Pretty-print the values
 */
fn print (...values: Stringifyable, pretty = true);

/**
 * Print values followed by a newline symbol
 * @param values The values to print
 * @param pretty Pretty-print the values
 */
fn println (...values: Stringifyable, pretty = true);

// ==================== Shortcut functions ==================== //

/**
 * Generate a concrete value
 * @param value A value
 * @returns Its concrete version
 */
fn some<T> (value: T) : Option<T>;

// ==================== Functions on references ==================== //

/**
 * Create a constant reference on a value
 * @param value A value
 * @returns A constant reference to this value
 */
fn ref<T> (value: T) : *T;

/**
 * Create a mutable reference on a value
 * @param value A value
 * @returns A mutable reference to this value
 */
fn ref_mut<T> (value: T) : *mut T;

/**
 * Check if a reference is a pointer
 * @param value The value to check
 * @returns `true` if it is
 */
fn is_ref<T> (value: T) : false;

/**
 * @samedef
 */
fn is_ref<T> (value: Ref<T>) : true;

// ==================== Functions related to asynchronous behaviours ==================== //

/**
 * Wait for a promise in an asynchronous function
 * @param promise The promise to wait for
 * @returns The promise's resolution data
 */
fn await<T> (promise: Promise<T>) : T;

/**
 * @samedef
 * @throws AwaitRejectionError If the promise fails
 */
fn await<T, X> (promise: Promise<T, X>) : T throws AwaitRejectionError<X>;

/**
 * Wait synchronously for a promise
 * @param promise The promise to wait for
 * @returns The promise's resolution data
 */
fn sync<T> (promise: Promise<T>) : T;

/**
 * @samedef
 * @throws AwaitRejectionError If the promise fails
 */
fn sync<T, X> (promise: Promise<T, X>) : T throws AwaitRejectionError<X>;

// ==================== Error functions ==================== //

/**
 * Make the program panic
 * @param message The panic message
 */
fn panic (message: string);