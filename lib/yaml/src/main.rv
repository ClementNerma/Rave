/**
 * @file YAML library
 * @author Cl√©ment Nerma
 * @license Apache-2.0
 */

#[declaration];

/**
 * YAML parsing error
 * Thrown when attempted to parse an invalid YAML string
 */
class YAMLParsingError extends Error {}

/**
 * YAML Value
 */
type YAMLValue = null | string | number | YAMLObject | YAMLValue[];

/**
 * YAML object
 */
dict YAMLObject extends Map<string, YAMLValue> {
  /**
   * Private constructor
   * Prevents instanciation of this class from the outside
   */
  private %new ();

  /**
   * Parse a YAML string
   * @param source A YAML string
   * @returns A YAML object
   * @throws YAMLParsingError If the provided source is not a valid YAML string
   */
  static parse (source: string) : self throws YAMLParsingError;

  /**
   * Create a YAML object from a dictionary
   * @param source The source dictionary
   * @returns A YAML object
   */
  static fromDictionary (source: Dictionary<string, YAMLValue>) : self;

  /**
   * Convert the current object to a string
   * @param pretty Outputs a spaced representation of the object
   * @param indent Number of spaces used for indentation (requires 'pretty' to be 'true')
   * @returns The current object as a string
   */
  stringify (pretty = false, indent: u8 = 4) : string;

  /**
   * Convert the current object to a string
   * Alias of `stringify()`
   */
  %to[string];
}

// Export everything
export *;